from aiogram import types
from loader import bot
from loader import dp
from data.config import *
from data.db import Mongodb
from handlers.users.keyboards import *
from aiogram.dispatcher.filters import Text

user_db = Mongodb('Telegram', 'users')
acc_db = Mongodb('Telegram', 'accounts')
back = types.InlineKeyboardMarkup()
back.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_main'))



@dp.callback_query_handler(Text(startswith='buy '))
async def buy_items(callback_query: types.CallbackQuery):
    # print(callback_query.data)
    item_id = callback_query.data.split()[-1]
    item = acc_db.find_data({'item_id': int(item_id)})
    user = user_db.find_data({'user_id': callback_query.from_user.id})
    balance = user['balance']
    if balance >= price[item['project']]:
        await callback_query.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç! –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ–≥–æ\n–°–µ—Ä–≤–∏—Å: {item["project"]}\n–õ–æ–≥–∏–Ω: <code>{item["login"]}</code>\n–ü–∞—Ä–æ–ª—å: <code>{item["password"]}</code>', parse_mode=types.ParseMode.HTML)
        acc_db.delete_data({'item_id': int(item_id)})
        user_db.update_data({'user_id': user['user_id']}, {'balance': balance - price[item['project']]})
    else:
        await callback_query.message.answer(f'Opss...\n–£–≤—ã, –Ω–æ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')

    # await callback_query.message.edit_text(f"{item['about']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å {price[item['project']]}‚ÇΩ")



@dp.callback_query_handler(Text(startswith='refresh'))
async def refresh_acc(callback_query: types.CallbackQuery):
    button, about = gen_item_keyboard(callback_query.data.split()[-1])
    await callback_query.message.edit_text(f'–ê–∫–∫–∞—É–Ω—Ç: {callback_query.data.split()[-1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {about}\n–¶–µ–Ω–∞: {price[callback_query.data.split()[-1]]}‚ÇΩ')
    await callback_query.message.edit_reply_markup(button)


@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    # print(callback_query.data)
    # print(callback_query)
    # data = callback_query.message.text
    # print(data)
    if callback_query.data == 'profile':
        await callback_query.message.edit_text(f'ü§ñ–ò–º—è: {callback_query.from_user.first_name}\n‚öôÔ∏è–í–∞—à Telegram id: {callback_query.from_user.id}\nüí∞–ë–∞–ª–∞–Ω—Å: {user_db.find_data({"user_id": callback_query.from_user.id})["balance"]}‚ÇΩ', reply_markup=back)
    # await callback_query.message.edit_text('Ok')
    elif callback_query.data == 'back_main':
        await callback_query.message.edit_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö!\n'
                         '<pre>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑ –Ω–∏–∂–µ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ</pre>', parse_mode=types.ParseMode.HTML, reply_markup=gen_main_keyboard())

    elif callback_query.data == 'buy_item':
        await callback_query.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', reply_markup=gen_category_keyboard())

    elif callback_query.data in services:
        buttons, about = gen_item_keyboard(callback_query.data)
        await callback_query.message.edit_text(f'–ê–∫–∫–∞—É–Ω—Ç: {callback_query.data}\n–û–ø–∏—Å–∞–Ω–∏–µ: {about}\n–¶–µ–Ω–∞: {price[callback_query.data.split()[-1]]}‚ÇΩ', reply_markup=buttons)

    elif callback_query.data in ['next', 'previous']:
        if callback_query.data == 'next':
            await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∞–∫–∫–∞—É—Ç: ', reply_markup=gen_category_keyboard())

    elif callback_query.data.isdigit():
        await callback_query.message.edit_reply_markup(buy_item(callback_query.data))

